--------------------------------------------------------------------------------------------------------------
---------------------------------- 2. SETUP ------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------
(Java Development Kit) JDK 11 (the latest version, use Oracle version of java) contains
1 java compiler
2 IDE (we will be using IntelliJ IDE from a company called JetBrains) - has free version. 
  There are other software like NetBeans, Eclipse or any other IDE's that support Java
3 JVM (Java VM) with JAva Runtime Edition (JRE)

Java 9 and Java 10 are no longer supported by Oracle.
Java 12, Java 13 will expire in 6 months.
But Java 11 - has LTS (long term support).

Installing JDK 11 on a Mac
http://java.sun.com --> Java SE (standard edition) --> 

Installing and Configuring IntelliJ IDEA on a Mac
https://www.jetbrains.com/  (this company created IntelliJ IDE to write java programs) --> Tools --> IntelliJ IDEA --> 
--> Download (Community For JVM and Android development) --> Open IntelliJ IDEA CE (Community Edition) app --> 
--> Configure --> Project Defaults --> Project Structure.
--> Configure --> Preferences ..

Create new project --> make sure it's Java tab, Project SDK 11 --> Next --> .
src --> new -> Java class. --> write your code --> right click on main f-n --> Run 'Hello.main()'

public class Hello {
    public static void main(String[] args) {    //entry point
        System.out.println("Hello, World!");
    }
}

HelloWorld.iml    a file created by IntelliJ to keep track of things like the files that are part of this project the names and so on
out 
  production
    HelloWorld
      Hello.class   // compiled - taken java code and converted so the computer can understand it
src
  Hello.java
  

IntelliJ automatically saves code for you (or File -> Save All). Eclipse - doesn't.

--------------------------------------------------------------------------------------------------------------
----------------------------------- 3. Variables, Datatypes and Operators ------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------
sout   - выведет System.out.println();
psvm   - выведет public static void main(String[] args) {}


https://unicode-table.com/en/#control-character

8 'Primitive' Data types (created by a language):
- Whole numbers: int, byte, short, double
- Decimal numbers: float, double
- Char, Boolean

There's a way to create your own data types also known as 'objects'.

String is not a primitive data type. It's class.
-=-=-=-=-=-=-==-=-=-==-=-=--=-=-=-=-=-=-==-=-=-==-=-=-
Float is an object; float is a primitive. Same relationship as Integer and int, Double and double, Long and long.
float can be converted to Float by autoboxing, e.g.
      float f=1.0f;
      Float floatObject = f;
or explicitly
      Float floatObject = new Float(f);
Initially primitives were retained alongside the object versions for speed. Autoboxing/unboxing was added with java 5 to facilitate conversion.
-=-=-=-=-=-=-==-=-=-==-=-=--=-=-=-=-=-=-==-=-=-==-=-=-

Operators:
= (assign operator) + - / * % 
++  --  
+=  -=  *=  /=
operators below are used in conditions:
== (equal to)  != (not equal to) > >=  < <= && (AND)  || (OR)   
ternary operator ?:

Check:  JAVA Tutorial https://docs.oracle.com/javase/tutorial/java/nutsandbolts/opsummary.html
Check:  Java Operator Precedence Table

--------------------------------------------------------------------------------------------------------------
----------------------------------- 4. Java Tutorial: Expressions, Statements, Code Blocks, Methods and more -------------------------
--------------------------------------------------------------------------------------------------------------
Java has 53 reserved words - keywords. IntelliJ will highlight keywords in blue. 
Check:  List of Java keywords.

The expression component is variable, values and operators. Data type is not part of expression.
double kilometers = (100 * 1.609344);   // expression is kilometers = (100 * 1.609344)
                                        // statement is double kilometers = (100 * 1.609344);
By adding data type(and semicolon) we form a valid data statement.

Install DiffMerge
http://sourcegear.com/diffmerge/
Downloads --> DiffMerge --> OS X 10.6 DMG(Intel)

Method Overloading is a feature that allows us to have more than one method with the same name, so long as we use different parameters.
As an example, let's say you have to create a method which can do:
  - the sum of two numbers;
  - the sum of three numbers;
  - the sum of four numbers.
  
Bad practice:
public static int sumTwoNumbers (int a, int b) { return a + b; }
public static int sumThreeNumbers (int a, int b, inc c) { return a + b + c; }
public static int sumFourNumbers (int a, int b, int c, int d) { return a + b + c + d; }

With method overloading we end up with 3 methods but all sharing the same method name.

Good practice:
public static int sum (int a, int b) { return a + b; }
public static int sum (int a, int b, inc c) { return a + b + c; }
public static int sum (int a, int b, int c, int d) { return a + b + c + d; }

CONSTANT 
public static final String INVALID_VALUE_MESSAGE = "Invalid value";


--------------------------------------------------------------------------------------------------------------
----------------------------------- 5. Control Statements Flow ------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------
1. switch
2. for / for each (used in arrays/objects)
3. while
4. do while


Integer.parseInt();
Double.parseDouble();

Method nextline
Class Scanner (for primitive types and strings)
import java.util.Scanner;   - will be added automatically.
System.in - to type input into console.
new keyword - is instance/object of e.g. Scanner

while (true) {  // endless loop
  // code
  if (counter == 10)
      break;        // e.i. after 10 iterations break loop;
}
--------------------------------------------------------------------------------------------------------------
----------------------------------- 6. OOP Part 1: Classes, Constructors and Inheritance ---------------------------------------------
--------------------------------------------------------------------------------------------------------------
OOP 1: Classes, Objects, Constructors, Inharitance
4 components of OOP: 
--------------------------------------------------------------------------------------------------------------
----------------------------------- 7. OOP Part 2: Composition, Encapsulation and Polymorphism ---------------------------------------
--------------------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------------------
----------------------------------- 8. Arrays, Java inbuilt Lists, Autoboxing and Unboxing -------------------------------------------
--------------------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------------------
----------------------------------- 9. Inner and Abstact Classes & Interfaces --------------------------------------------------------
--------------------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------------------
----------------------------------- 10. Java Generics ------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------------------
----------------------------------- 11. Naming Conventions and Packages. static and final keywords -------------------------------------
--------------------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------------------
----------------------------------- 12. Java Collections ------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------------------
----------------------------------- 13. Java FX ------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------------------
----------------------------------- 14. Basic Input & Output including java.util ------------------------------------------------------
--------------------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------------------
----------------------------------- 15. Concurrency in Java ------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------------------
----------------------------------- 16. Lambda Expressions ------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------------------
----------------------------------- 17. Regular Expressions ------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------------------
----------------------------------- 18. Debugging and Unit Testing ------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------------------
----------------------------------- 19. Databases ------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------------------
----------------------------------- 20. Java Networking Programming ------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------------------
----------------------------------- 21. Java 9 Module System ------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------------------
----------------------------------- 22. Migrating Java projects to Java 9 ------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------------------
----------------------------------- 23. Archived videos ------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------------------
----------------------------------- 24. Bonus Materials ------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------


