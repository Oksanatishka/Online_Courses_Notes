--------------------------------------------------------------------------------------------------------------
---------------------------------- 2. SETUP ------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------
(Java Development Kit) JDK 11 (the latest version, use Oracle version of java) contains
1 java compiler
2 IDE (we will be using IntelliJ IDE from a company called JetBrains) - has free version. 
  There are other software like NetBeans, Eclipse or any other IDE's that support Java
3 JVM (Java VM) with JAva Runtime Edition (JRE)

Java 9 and Java 10 are no longer supported by Oracle.
Java 12, Java 13 will expire in 6 months.
But Java 11 - has LTS (long term support).

Installing JDK 11 on a Mac
http://java.sun.com --> Java SE (standard edition) --> 

Installing and Configuring IntelliJ IDEA on a Mac
https://www.jetbrains.com/  (this company created IntelliJ IDE to write java programs) --> Tools --> IntelliJ IDEA --> 
--> Download (Community For JVM and Android development) --> Open IntelliJ IDEA CE (Community Edition) app --> 
--> Configure --> Project Defaults --> Project Structure.
--> Configure --> Preferences ..

Create new project --> make sure it's Java tab, Project SDK 11 --> Next --> .
src --> new -> Java class. --> write your code --> right click on main f-n --> Run 'Hello.main()'

public class Hello {
    public static void main(String[] args) {    //entry point
        System.out.println("Hello, World!");
    }
}

HelloWorld.iml    a file created by IntelliJ to keep track of things like the files that are part of this project the names and so on
out 
  production
    HelloWorld
      Hello.class   // compiled - taken java code and converted so the computer can understand it
src
  Hello.java
  

IntelliJ automatically saves code for you (or File -> Save All). Eclipse - doesn't.

--------------------------------------------------------------------------------------------------------------
----------------------------------- 3. Variables, Datatypes and Operators ------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------
sout   - выведет System.out.println();
psvm   - выведет public static void main(String[] args) {}


https://unicode-table.com/en/#control-character

8 'Primitive' Data types (created by a language):
- Whole numbers: int, byte, short, double
- Decimal numbers: float, double
- Char, Boolean

There's a way to create your own data types also known as 'objects'.

String is not a primitive data type. It's class.
-=-=-=-=-=-=-==-=-=-==-=-=--=-=-=-=-=-=-==-=-=-==-=-=-
Float is an object; float is a primitive. Same relationship as Integer and int, Double and double, Long and long.
float can be converted to Float by autoboxing, e.g.
      float f=1.0f;
      Float floatObject = f;
or explicitly
      Float floatObject = new Float(f);
Initially primitives were retained alongside the object versions for speed. Autoboxing/unboxing was added with java 5 to facilitate conversion.
-=-=-=-=-=-=-==-=-=-==-=-=--=-=-=-=-=-=-==-=-=-==-=-=-

Operators:
= (assign operator) + - / * % 
++  --  
+=  -=  *=  /=
operators below are used in conditions:
== (equal to)  != (not equal to) > >=  < <= && (AND)  || (OR)   
ternary operator ?:

Check:  JAVA Tutorial https://docs.oracle.com/javase/tutorial/java/nutsandbolts/opsummary.html
Check:  Java Operator Precedence Table

--------------------------------------------------------------------------------------------------------------
----------------------------------- 4. Java Tutorial: Expressions, Statements, Code Blocks, Methods and more -------------------------
--------------------------------------------------------------------------------------------------------------
Java has 53 reserved words - keywords. IntelliJ will highlight keywords in blue. 
Check:  List of Java keywords.

The expression component is variable, values and operators. Data type is not part of expression.
double kilometers = (100 * 1.609344);   // expression is kilometers = (100 * 1.609344)
                                        // statement is double kilometers = (100 * 1.609344);
By adding data type(and semicolon) we form a valid data statement.

Install DiffMerge
http://sourcegear.com/diffmerge/
Downloads --> DiffMerge --> OS X 10.6 DMG(Intel)

Method Overloading is a feature that allows us to have more than one method with the same name, so long as we use different parameters.
As an example, let's say you have to create a method which can do:
  - the sum of two numbers;
  - the sum of three numbers;
  - the sum of four numbers.
  
Bad practice:
public static int sumTwoNumbers (int a, int b) { return a + b; }
public static int sumThreeNumbers (int a, int b, inc c) { return a + b + c; }
public static int sumFourNumbers (int a, int b, int c, int d) { return a + b + c + d; }

With method overloading we end up with 3 methods but all sharing the same method name.

Good practice:
public static int sum (int a, int b) { return a + b; }
public static int sum (int a, int b, inc c) { return a + b + c; }
public static int sum (int a, int b, int c, int d) { return a + b + c + d; }

CONSTANT 
public static final String INVALID_VALUE_MESSAGE = "Invalid value";


--------------------------------------------------------------------------------------------------------------
----------------------------------- 5. Control Statements Flow ------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------
1. switch
2. for / for each (used in arrays/objects)
3. while
4. do while


Integer.parseInt();
Double.parseDouble();

Method nextline
Class Scanner (for primitive types and strings)
import java.util.Scanner;   - will be added automatically.
System.in - to type input into console.
new keyword - is instance/object of e.g. Scanner

while (true) {  // endless loop
  // code
  if (counter == 10)
      break;        // e.i. after 10 iterations break loop;
}
--------------------------------------------------------------------------------------------------------------
----------------------------------- 6. OOP Part 1: Classes, Constructors and Inheritance ---------------------------------------------
--------------------------------------------------------------------------------------------------------------
OOP 1: Classes, Objects, Constructors, Inharitance
4 components of OOP: Inharitance | composition | encapsulation | polymorphysm

Objects have 2 characteristics: state & behaviour. 
Class is as template for creating objects.
Class: 
  -- fields (member variables) --> private (encapsulation - to hide fields and methods from access publicly)
  -- methods

In IntelliJ, 
Code --> Generate --> Getter and Setter (will do it automatically).
Code --> Generate --> Constructor

The purpose of constructor is to initialize the object you're creating and do whatever else you wanna do at the time the object is being created. It's called once at the start.
Constructor can be overloaded (we can have more than one constructor).

Inheritance
- add 'extends' keyword, e.i. public class Dog extends Animal (inhariting from Animal class).
- call that other constructor class to initialize it
- we can overwrite Animal methods
  Code --> Generate --> Overwrite methods.
  
---------------------------------------------------------
Reference vs Object vs Instance vs Class
  Class - as a template for a building a house
  Object / Instance - as each house
  Reference - as an address of a house
  e.g.
      House bluehouse = new House();    // reference     
      House anotherhouse = bluehouse;   // refence to the same object in memory - once you change one - the other one will be changed too
---------------------------------------------------------  
this vs super
1) The keyword 'super' is used to access/call the parent class members (variables and methods).
   --- used with method overriding.
(In other words it's calling the method with the same name from the parent class. Without the keyword 'super' it would be recursive call.
Meaning that the method would call it self forever or until memory is fully used).
2) The keyword 'this'  is used to call        the current class members.         
   --- used with constructors and setters.
NOTE: we can use both of them anywhere in a class except static areas (the static block or a static method). 
        Any attempt to do so will lead to compile-time errors.

this() vs super() call

---------------------------------------------------------
Method Overloading vs Overriding Recap
1) Overloading doesn't have anything to do with polymorphism but Java developers often refer to overloading as Compile Time Polymorphism.
We can overload static and instance methods.
May have different Access Modifiers(private, public, protected).
    
    class Dog {
        public void bark(){                     // same name, same parameters
          System.out.println("woof");
        }
    }
    
    class GermanShepherd extends Dog {
        @Override
        public void bark(){                     // same name, same parameters
          System.out.println("woof woof woof");
        }
    }
    
2) Method overriding means defining a method in a child class that already exists in the parent class with same signature (same name, same arguments).
Method overriding is also know as Runtime Polymorphism and Dynamic Method Dispatch, because the method that is going to be called is decided at runtime by the JVM.
When we override a method it's recommended to put @Override immediately above the method definition.
We can't override static methods, only instance methods.
      
      class Dog {
        public void bark(){                     // same name, same parameters
          System.out.println("woof");
        }
        
        public void bark(int number){           // same name, different parameters
          for(int i=0;i<number;i++)
              System.out.println("woof");
        }
    }
   
---------------------------------------------------------
Static vs Instance Methods
static methods are called as ClassName.methodName(); or methodName(); only if in the same class.
main is a static method.
Static or Instance Method?
Should a method be static?  --> Does it use any fields(instance variables) or instance methods? -->
--> Yes --> It should probably be an instance method
--> No  --> It should probably be a static method
---------------------------------------------------------

Static vs Instance Variables


--------------------------------------------------------------------------------------------------------------
----------------------------------- 7. OOP Part 2: Composition, Encapsulation and Polymorphism ---------------------------------------
--------------------------------------------------------------------------------------------------------------
Inheritance relationship:   is    e.g. Car is a Vehicle.
Composition relationship:   has   e.g. Computer has monitor/motherboard/etc. (but monitor is not a computer, it's part) 

---------  Composition: --------- 
- создается основной класс напр. Room
      public class Room {
        private Bed bed;
        private Table table;
        private Chair chair;
        ...
      }
- создаются остальные классы для обьектов основного класса напр Bed, Wall, Table etc
- в main классе напр
      Table theTable = new Table("white", "wood");
      Chair theChair = new Chair("red", 4);
      Bed theBed = new Bed(2,"brown");

      Room room = new Room(theBed, theTable, theChair);
      room.getTable().hide();

--------- Encapsulation (to restrict access to certain components in the objects) --------- 
- вместо того чтобы создавать классы с филдами public и потом инициализировать их вручную в main классе
- нужно использовать private для филдов и конструкторы
  Если нужно поменять имя филда во всех местах где он встречается --> правой кнопкой мишы на нем --> Refactor --> Rename


--------- Polymorphism --------- 
it's a method/mechanism that allows actions to act differently based on the actual object that the action is being performed on.
- create classes within main public class (Main.java) -(this is another way of creating classes that aren't going to be reused - small and compact.)

We can perform polymorphism in java by method overloading and method overriding.

--------------------------------------------------------------------------------------------------------------
----------------------------------- 8. Arrays, Java inbuilt Lists, Autoboxing and Unboxing -------------------------------------------
--------------------------------------------------------------------------------------------------------------
Array is a data structure that allows you to store sequence of values that are all of the same type.
- array of integers
- array of Strings
- etc

If we try to access index that is out of range Java will give us an ArrayIndexOutOfBoundsException, which indicates
that the index is out of range in other words, out of bounds. 

- boolean array elements will be initialized to false
- number array elements - to zero
- string or other objects - to null

--------- References Types vs Value Types---------

Arrays.toString() method
Returns a string representation of the contents of the specified array. The string representation consists of a list of the array’s elements, enclosed in square brackets (“[]”). Adjacent elements are separated by the characters “, ” (a comma followed by a space). 

boolean[] boolArr = new boolean[] { true, true, false, true };      
System.out.println(Arrays.toString(boolArr));                       // [true, true, false, true]
byte[] byteArr = new byte[] { 10, 20, 30 };                         // [10, 20, 30]
char[] charArr = new char[] { 'g', 'e', 'e', 'k', 's' };            // [g, e, e, k, s]
double[] dblArr = new double[] { 1, 2, 3, 4 };                      // [1.0, 2.0, 3.0, 4.0]
float[] floatArr = new float[] { 1, 2, 3, 4 };                      // [1.0, 2.0, 3.0, 4.0]
int[] intArr = new int[] { 1, 2, 3, 4 };                            // [1, 2, 3, 4]
long[] lomgArr = new long[] { 1, 2, 3, 4 };                         // [1, 2, 3, 4]
Object[] objArr = new Object[] { 1, 2, 3, 4 };                      // [1, 2, 3, 4]
short[] shortArr = new short[] { 1, 2, 3, 4 };                      // [1, 2, 3, 4]


--------- List and ArrayList ---------
Resizing array
List interface
ArrayList is a resizable array. It handles the resizing automatically.
ArrayLists can hold objects.

--------- Autoboxing & Unboxing ---------
Autoboxing: 
it's converting a primitive value into an object of the corresponding wrapper class. 
For example, converting int to Integer class. The Java compiler applies autoboxing when a primitive value is:
- Passed as a parameter to a method that expects an object of the corresponding wrapper class.
- Assigned to a variable of the corresponding wrapper class.

Unboxing: 
it's converting an object of a wrapper type to its corresponding primitive value.
For example conversion of Integer to int. The Java compiler applies unboxing when an object of a wrapper class is:
- Passed as a parameter to a method that expects a value of the corresponding primitive type.
- Assigned to a variable of the corresponding primitive type.

Primitive type      Wrapper Class
boolean             Boolean 
byte                Byte
char                Character (!)
float               Float 
int                 Integer   (!)
long                Long
short               Short
double              Double

Integer i = new Integer(10);    // creating an Integer Object with value 10. 
int i1 = i;                     // unboxing the Object 
Character gfg = 'a';            //Autoboxing of char 

Integer myIntValue = 54;     // Integer myIntValue = Integer.valueOf(54);   - it's the same 
int myInt = myIntValue();    // int myInt = myIntValue.intValue();          - it's the same

// used when we store primitive types in arrays or pass them as parameters using objects

--------- Linked Lists ---------
int     4 bytes of memory
double  8 bytes

Java Garbage Collection

Linked List are linear data structures where the elements are not stored in contiguous locations and every element is a separate object with a data part and address part. The elements are linked using pointers and addresses. Each element is known as a node. Due to the dynamicity and ease of insertions and deletions, they are preferred over the arrays. It also has few disadvantages like the nodes cannot be accessed directly instead we need to start from the head and follow through the link to reach to a node we wish to access.

Java implemented linked lists as double linked lists.

--------------------------------------------------------------------------------------------------------------
----------------------------------- 9. Inner and Abstact Classes & Interfaces --------------------------------------------------------
--------------------------------------------------------------------------------------------------------------
An interface is an abstract "class" that is used to group related methods with "empty" bodies

// interface
interface Animal {
  public void animalSound(); // interface method (does not have a body)
  public void run(); // interface method (does not have a body)
}


To access the interface methods, the interface must be "implemented" (kinda like inherited) by another class with the implements keyword (instead of extends). The body of the interface method is provided by the "implement" class

// Pig "implements" the Animal interface
class Pig implements Animal {
  public void animalSound() {
    // The body of animalSound() is provided here
    System.out.println("The pig says: wee wee");
  }
  public void sleep() {
    // The body of sleep() is provided here
    System.out.println("Zzz");
  }
}

Why And When To Use Interfaces?
To achieve security - hide certain details and only show the important details of an object (interface).
Java does not support "multiple inheritance" (a class can only inherit from one superclass). However, it can be achieved with interfaces, because the class can implement multiple interfaces. Note: To implement multiple interfaces, separate them with a comma (see example below).

Interface methods are by default abstract and public

// DemoClass "implements" FirstInterface and SecondInterface
class DemoClass implements FirstInterface, SecondInterface {
  ....
}

List --> LinkedList, ArrayList, Vector


Inner Classes
4 types of nested classes:
- static
- non-static
- local
- anonymous
--------------------------------------------------------------------------------------------------------------
----------------------------------- 10. Java Generics ------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------------------
----------------------------------- 11. Naming Conventions and Packages. static and final keywords -------------------------------------
--------------------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------------------
----------------------------------- 12. Java Collections ------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------------------
----------------------------------- 13. Java FX ------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------------------
----------------------------------- 14. Basic Input & Output including java.util ------------------------------------------------------
--------------------------------------------------------------------------------------------------------------
NIO

--------------------------------------------------------------------------------------------------------------
----------------------------------- 15. Concurrency in Java ------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------------------
----------------------------------- 16. Lambda Expressions ------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------------------
----------------------------------- 17. Regular Expressions ------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------------------
----------------------------------- 18. Debugging and Unit Testing ------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------
JUnit

--------------------------------------------------------------------------------------------------------------
----------------------------------- 19. Databases ------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------
SQLite
JDBC
--------------------------------------------------------------------------------------------------------------
----------------------------------- 20. Java Networking Programming ------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------
Client and Server Apps
HTTPUrlConnection
--------------------------------------------------------------------------------------------------------------
----------------------------------- 21. Java 9 Module System ------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------------------
----------------------------------- 22. Migrating Java projects to Java 9 ------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------------------
----------------------------------- 23. Archived videos ------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------------------
----------------------------------- 24. Bonus Materials ------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------


--------------------------------------------------------------------------------------------------------------
----------------------------------- Other Notes ------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------
When an error occurs, Java will normally stop and generate an error message. The technical term for this is: Java will throw an exception (throw an error).

----------- Java try and catch
The try statement allows you to define a block of code to be tested for errors while it is being executed.
The catch statement allows you to define a block of code to be executed, if an error occurs in the try block.
The try and catch keywords come in pairs:

try {
  //  Block of code to try
}
catch(Exception e) {
  //  Block of code to handle errors
}

The finally statement lets you execute code, after try...catch, regardless of the result.
The throw statement allows you to create a custom error.
The throw statement is used together with an exception type. There are many exception types available in Java: ArithmeticException, ClassNotFoundException, ArrayIndexOutOfBoundsException, SecurityException, etc.


----------- Non-Access Modifiers
Access Modifiers - controls the access level
    For classes: public or default
    For attributes, methods and constructors: public, private, protected, default
Non-Access Modifiers - do not control access level, but provides other functionality
    For classes: final or abstract
    For attributes and methods: final, abstract, static, transient, synchronized, volatile


----------- Java Packages & API
A package in Java is used to group related classes. We use packages to avoid name conflicts, and to write a better maintainable code. Packages are divided into two categories:
 - Built-in Packages (packages from the Java API)       https://docs.oracle.com/javase/8/docs/api/
 - User-defined Packages (create your own packages)


----------- Java Enums
Enum is short for "enumerations", which means "specifically listed".
An enum is a special "class" that represents a group of constants (unchangeable variables, like final variables).

enum Level {
  LOW,
  MEDIUM,
  HIGH
}

You can access enum constants with the dot syntax:
Level myVar = Level.MEDIUM;


-------- Java User Input (Scanner)
Input Types
nextBoolean()	  Reads a boolean value from the user
nextByte()	    Reads a byte value from the user
nextDouble()	  Reads a double value from the user
nextFloat()	    Reads a float value from the user
nextInt()	      Reads a int value from the user
nextLine()	    Reads a String value from the user
nextLong()	    Reads a long value from the user
nextShort()	    Reads a short value from the user



------- Java Collections
A Collection is a group of individual objects represented as a single unit. Java provides Collection Framework which defines several classes and interfaces to represent a group of objects as a single unit.

The Collection interface (java.util.Collection) and Map interface (java.util.Map) are the two main “root” interfaces of Java collection classes.

------- Java HashMap
You learned from the previous chapter, that Arrays store items as an ordered collection, and you have to access them with an index number (int type). 
A HashMap however, store items in "key/value" pairs, and you can access them by an index of another type (e.g. a String).

One object is used as a key (index) to another object (value). It can store different types: String keys and Integer values, or the same type, like: String keys and String values.

Example: Create a HashMap object called capitalCities that will store String keys and String values:

import java.util.HashMap; // import the HashMap class
HashMap<String, String> capitalCities = new HashMap<String, String>();

To Add Items:         use the put() method
To Access an Item:    use the get() method and refer to its key
To Remove an Item:    use the remove() method and refer to the key
To remove all items:  use the clear() method
HashMap Size:         size();

Loop through the items of a HashMap with a for-each loop.
Use the keySet() method if you only want the keys, and use the values() method if you only want the values.
Keys and values in a HashMap are actually objects.

------- Java Files
The File class from the java.io package, allows us to work with files.

